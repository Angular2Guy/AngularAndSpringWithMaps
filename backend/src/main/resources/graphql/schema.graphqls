scalar Date
scalar BigDecimal
scalar Long

input CompanySiteIn {
	id: ID!
	title: String!
	atDate: Date!
	polygons: [PolygonIn]
}

type CompanySiteOut {
	id: ID!
	title: String!
	atDate: Date!
	polygons: [PolygonOut]
}

type PolygonOut {
    id: ID!
	fillColor: String
	borderColor: String
	title: String
	longitude: BigDecimal! 
	latitude: BigDecimal!
	rings: [RingOut]
}

input PolygonIn {
    id: ID
	fillColor: String
	borderColor: String
	title: String
	longitude: BigDecimal! 
	latitude: BigDecimal!
	rings: [RingIn]
}

input RingIn {
    id: ID
	primary: Boolean!	
	locations: [LocationIn]
}

type RingOut  {
    id: ID!
	primary: Boolean!	
	locations: [LocationOut]
}

input LocationIn {
    id: ID
	longitude: BigDecimal!
	latitude: BigDecimal!
	orderId: Int
}

type LocationOut {
    id: ID!
	longitude: BigDecimal!
	latitude: BigDecimal!
	orderId: Int!
}

type MainConfigurationOut {
	mapKey: String!
}

type Query {
    getMainConfiguration: MainConfigurationOut
    getCompanySiteByTitle(title: String!, year: Long!): [CompanySiteOut]
    getCompanySiteById(id: ID!): CompanySiteOut
}

type Mutation {
   upsertCompanySite(companySite: CompanySiteIn!): CompanySiteOut
   resetDb: Boolean
   deletePolygon(companySiteId: ID!, polygonId: ID!): Boolean
}